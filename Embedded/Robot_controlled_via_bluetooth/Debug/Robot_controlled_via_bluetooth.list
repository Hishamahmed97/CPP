
Robot_controlled_via_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005e0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000004  080005e4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080005e4  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ea9  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d8f  00000000  00000000  00021f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  00022ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c1  00000000  00000000  00022f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015886  00000000  00000000  000230f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003610  00000000  00000000  00038977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bc0e  00000000  00000000  0003bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000007a0  00000000  00000000  000b7b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b8338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005b8 	.word	0x080005b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005b8 	.word	0x080005b8

0800014c <_ZN5MotorC1EP11MotorConfig>:
 *  Created on: Aug 23, 2024
 *      Author: dell
 */
#include"Motor.h"

	Motor::Motor(MotorConfig * config) : config_{config}
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	683a      	ldr	r2, [r7, #0]
 800015a:	601a      	str	r2, [r3, #0]
	{
		config_->in1.Off();
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4618      	mov	r0, r3
 8000162:	f000 f965 	bl	8000430 <_ZN6Output3OffEv>
		config_->in2.Off();
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	3308      	adds	r3, #8
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f95f 	bl	8000430 <_ZN6Output3OffEv>
		config_->en.Off();
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	3310      	adds	r3, #16
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f959 	bl	8000430 <_ZN6Output3OffEv>
	}
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	4618      	mov	r0, r3
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <_ZN5Motor2CWEv>:

	void Motor::CW()
	{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
		config_->in1.On();
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f935 	bl	8000404 <_ZN6Output2OnEv>
		config_->in2.Off();
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	3308      	adds	r3, #8
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f945 	bl	8000430 <_ZN6Output3OffEv>
		config_->en.On();
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	3310      	adds	r3, #16
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f929 	bl	8000404 <_ZN6Output2OnEv>
	}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}

080001ba <_ZN5Motor3CCWEv>:
	void Motor::CCW()
		{
 80001ba:	b580      	push	{r7, lr}
 80001bc:	b082      	sub	sp, #8
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
		config_->in1.Off();
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 f932 	bl	8000430 <_ZN6Output3OffEv>
		config_->in2.On();
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3308      	adds	r3, #8
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 f916 	bl	8000404 <_ZN6Output2OnEv>
		config_->en.On();
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3310      	adds	r3, #16
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f910 	bl	8000404 <_ZN6Output2OnEv>
		}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <_ZN5Motor4StopEv>:
	void Motor::Stop()
			{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
			config_->in1.Off();
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f919 	bl	8000430 <_ZN6Output3OffEv>
			config_->in2.Off();
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3308      	adds	r3, #8
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f913 	bl	8000430 <_ZN6Output3OffEv>
			config_->en.Off();
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3310      	adds	r3, #16
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f90d 	bl	8000430 <_ZN6Output3OffEv>
			}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <main>:
	{GPIOA, 4},
	{GPIOA, 0},
	{GPIOB, 0}
};
int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	// Enable clock gating
	//RCC register is a struct where ABP2ENR exists, set the bit 2 & 3to high for Ports A and B enabling
			RCC->APB2ENR = (1<<2) | (1<<3);
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <main+0x40>)
 8000228:	220c      	movs	r2, #12
 800022a:	619a      	str	r2, [r3, #24]

			Motor M1(&M1_config);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	490c      	ldr	r1, [pc, #48]	; (8000264 <main+0x44>)
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <_ZN5MotorC1EP11MotorConfig>
			Motor M2(&M2_config);
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	490a      	ldr	r1, [pc, #40]	; (8000268 <main+0x48>)
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <_ZN5MotorC1EP11MotorConfig>
			Robot robot(&M1, &M2);
 8000244:	f107 0208 	add.w	r2, r7, #8
 8000248:	f107 010c 	add.w	r1, r7, #12
 800024c:	463b      	mov	r3, r7
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f905 	bl	800045e <_ZN5RobotC1EP5MotorS1_>
	while (1)
	{
		robot.forward();
 8000254:	463b      	mov	r3, r7
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f912 	bl	8000480 <_ZN5Robot7forwardEv>
 800025c:	e7fa      	b.n	8000254 <main+0x34>
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000
 8000264:	20000020 	.word	0x20000020
 8000268:	20000038 	.word	0x20000038

0800026c <_ZN11MotorConfigD1Ev>:

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_
#include "output.h"

struct MotorConfig
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3310      	adds	r3, #16
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f8b7 	bl	80003ec <_ZN6OutputD1Ev>
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3308      	adds	r3, #8
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f8b2 	bl	80003ec <_ZN6OutputD1Ev>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f8ae 	bl	80003ec <_ZN6OutputD1Ev>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <_Z41__static_initialization_and_destruction_0ii>:
	}
	return 0;
}
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d122      	bne.n	80002f2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d11d      	bne.n	80002f2 <_Z41__static_initialization_and_destruction_0ii+0x56>
};
 80002b6:	2205      	movs	r2, #5
 80002b8:	4917      	ldr	r1, [pc, #92]	; (8000318 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80002ba:	4818      	ldr	r0, [pc, #96]	; (800031c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80002bc:	f000 f84c 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
 80002c0:	2201      	movs	r2, #1
 80002c2:	4917      	ldr	r1, [pc, #92]	; (8000320 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80002c4:	4817      	ldr	r0, [pc, #92]	; (8000324 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80002c6:	f000 f847 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
 80002ca:	2206      	movs	r2, #6
 80002cc:	4912      	ldr	r1, [pc, #72]	; (8000318 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80002ce:	4816      	ldr	r0, [pc, #88]	; (8000328 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80002d0:	f000 f842 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
};
 80002d4:	2204      	movs	r2, #4
 80002d6:	4910      	ldr	r1, [pc, #64]	; (8000318 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80002d8:	4814      	ldr	r0, [pc, #80]	; (800032c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80002da:	f000 f83d 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
 80002de:	2200      	movs	r2, #0
 80002e0:	490d      	ldr	r1, [pc, #52]	; (8000318 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80002e2:	4813      	ldr	r0, [pc, #76]	; (8000330 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80002e4:	f000 f838 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
 80002e8:	2200      	movs	r2, #0
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80002ee:	f000 f833 	bl	8000358 <_ZN6OutputC1EP12GPIO_TypeDefh>
MotorConfig M2_config
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d10a      	bne.n	800030e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002fe:	4293      	cmp	r3, r2
 8000300:	d105      	bne.n	800030e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000302:	480a      	ldr	r0, [pc, #40]	; (800032c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000304:	f7ff ffb2 	bl	800026c <_ZN11MotorConfigD1Ev>
MotorConfig M1_config
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800030a:	f7ff ffaf 	bl	800026c <_ZN11MotorConfigD1Ev>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010800 	.word	0x40010800
 800031c:	20000020 	.word	0x20000020
 8000320:	40010c00 	.word	0x40010c00
 8000324:	20000028 	.word	0x20000028
 8000328:	20000030 	.word	0x20000030
 800032c:	20000038 	.word	0x20000038
 8000330:	20000040 	.word	0x20000040
 8000334:	20000048 	.word	0x20000048

08000338 <_GLOBAL__sub_I_M1_config>:
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
 800033c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ffab 	bl	800029c <_Z41__static_initialization_and_destruction_0ii>
 8000346:	bd80      	pop	{r7, pc}

08000348 <_GLOBAL__sub_D_M1_config>:
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
 800034c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffa3 	bl	800029c <_Z41__static_initialization_and_destruction_0ii>
 8000356:	bd80      	pop	{r7, pc}

08000358 <_ZN6OutputC1EP12GPIO_TypeDefh>:
 */

#include "Output.h"

uint8_t Output::output_counter = 0;
Output::Output(GPIO_TypeDef * GPIO, uint8_t pin) : port_{GPIO}, pin_{pin}
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	4613      	mov	r3, r2
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	711a      	strb	r2, [r3, #4]
	{
		Off();
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	f000 f85c 	bl	8000430 <_ZN6Output3OffEv>
		//below if to configure the 4 bits for output
		if (output_counter ==0)
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d107      	bne.n	8000390 <_ZN6OutputC1EP12GPIO_TypeDefh+0x38>
		{
			port_->CRL = 0x00000000;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
			port_->CRH = 0x00000000;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
		}
		output_counter++;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 800039a:	701a      	strb	r2, [r3, #0]
				if(pin_<PINS_PER_REGISTER)
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	d80c      	bhi.n	80003be <_ZN6OutputC1EP12GPIO_TypeDefh+0x66>
				{
					port_->CRL |= (OUTPUT_HIGH_SPEED<<pin_*BITS_PER_PIN);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6819      	ldr	r1, [r3, #0]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	2203      	movs	r2, #3
 80003b2:	409a      	lsls	r2, r3
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e00e      	b.n	80003dc <_ZN6OutputC1EP12GPIO_TypeDefh+0x84>
					//e.g.: PA1 will OUTPUT HIGH will be (3<<1*4);
				}
				else
				{
					port_->CRH |= (OUTPUT_HIGH_SPEED<<(pin_*BITS_PER_PIN-BITS_PER_REGISTER));
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6859      	ldr	r1, [r3, #4]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003cc:	3b08      	subs	r3, #8
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	2203      	movs	r2, #3
 80003d2:	409a      	lsls	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	430a      	orrs	r2, r1
 80003da:	605a      	str	r2, [r3, #4]
				}
	}
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	4618      	mov	r0, r3
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000050 	.word	0x20000050

080003ec <_ZN6OutputD1Ev>:
	Output::~Output()
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
		{
			Off();
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f81b 	bl	8000430 <_ZN6Output3OffEv>
		}
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4618      	mov	r0, r3
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <_ZN6Output2OnEv>:

	void Output::On()
		{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
			port_->ODR |= (1<<pin_); //This is the way for setting bit high keeping the value in other bits in the register
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	68da      	ldr	r2, [r3, #12]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	4619      	mov	r1, r3
 8000418:	2301      	movs	r3, #1
 800041a:	408b      	lsls	r3, r1
 800041c:	4619      	mov	r1, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	430a      	orrs	r2, r1
 8000424:	60da      	str	r2, [r3, #12]
		}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <_ZN6Output3OffEv>:

		void Output::Off()
		{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
			port_->ODR &=~(1<<pin_); //This is the way we clear certain bit keeping value in other bits in the register
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	2301      	movs	r3, #1
 8000446:	408b      	lsls	r3, r1
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
		}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <_ZN5RobotC1EP5MotorS1_>:
 *
 *  Created on: Aug 24, 2024
 *      Author: dell
 */
#include "robot.h"
	Robot::Robot(Motor * m1, Motor * m2)
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
	{
		m1->Stop();
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f7ff febe 	bl	80001ec <_ZN5Motor4StopEv>
		m2->Stop();
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f7ff febb 	bl	80001ec <_ZN5Motor4StopEv>
	}
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4618      	mov	r0, r3
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <_ZN5Robot7forwardEv>:
	void Robot::forward()
	{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
		m1->CW();
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff fe7b 	bl	8000188 <_ZN5Motor2CWEv>
		m2->CCW();
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff fe8f 	bl	80001ba <_ZN5Motor3CCWEv>
	}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ea:	f000 f82f 	bl	800054c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000500:	f7ff fff7 	bl	80004f2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000506:	490c      	ldr	r1, [pc, #48]	; (8000538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <LoopFillZerobss+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800051c:	4c09      	ldr	r4, [pc, #36]	; (8000544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052a:	f000 f821 	bl	8000570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe77 	bl	8000220 <main>
  bx lr
 8000532:	4770      	bx	lr
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800053c:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 8000540:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000544:	20000058 	.word	0x20000058

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>
	...

0800054c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x1c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x20>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x20>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000000 	.word	0x20000000
 800056c:	20000054 	.word	0x20000054

08000570 <__libc_init_array>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	2600      	movs	r6, #0
 8000574:	4d0c      	ldr	r5, [pc, #48]	; (80005a8 <__libc_init_array+0x38>)
 8000576:	4c0d      	ldr	r4, [pc, #52]	; (80005ac <__libc_init_array+0x3c>)
 8000578:	1b64      	subs	r4, r4, r5
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	42a6      	cmp	r6, r4
 800057e:	d109      	bne.n	8000594 <__libc_init_array+0x24>
 8000580:	f000 f81a 	bl	80005b8 <_init>
 8000584:	2600      	movs	r6, #0
 8000586:	4d0a      	ldr	r5, [pc, #40]	; (80005b0 <__libc_init_array+0x40>)
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <__libc_init_array+0x44>)
 800058a:	1b64      	subs	r4, r4, r5
 800058c:	10a4      	asrs	r4, r4, #2
 800058e:	42a6      	cmp	r6, r4
 8000590:	d105      	bne.n	800059e <__libc_init_array+0x2e>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	f855 3b04 	ldr.w	r3, [r5], #4
 8000598:	4798      	blx	r3
 800059a:	3601      	adds	r6, #1
 800059c:	e7ee      	b.n	800057c <__libc_init_array+0xc>
 800059e:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a2:	4798      	blx	r3
 80005a4:	3601      	adds	r6, #1
 80005a6:	e7f2      	b.n	800058e <__libc_init_array+0x1e>
 80005a8:	080005d0 	.word	0x080005d0
 80005ac:	080005d0 	.word	0x080005d0
 80005b0:	080005d0 	.word	0x080005d0
 80005b4:	080005d8 	.word	0x080005d8

080005b8 <_init>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr

080005c4 <_fini>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr
