
Systic_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c6d  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f4  00000000  00000000  000110a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00011798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00011880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001538d  00000000  00000000  00011917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d5d  00000000  00000000  00026ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b3dd  00000000  00000000  00028a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000218  00000000  00000000  000a3de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000a3ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080003a8 	.word	0x080003a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080003a8 	.word	0x080003a8

0800014c <_Z17SystickInitializev>:
  {
	  Ticks--;
  }
}
void SystickInitialize()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	  // Update SystemCoreClock value
		SysTick->LOAD = (OSC / MILLIS_IN_SEC) -1;
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <_Z17SystickInitializev+0x1c>)
 8000152:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000156:	605a      	str	r2, [r3, #4]
	    // Configure the SysTick timer to overflow every 1 us
		//SysTick->CTRL = (1<<0) | (1<<1) | (1<<2);
		SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8000158:	4b03      	ldr	r3, [pc, #12]	; (8000168 <_Z17SystickInitializev+0x1c>)
 800015a:	2207      	movs	r2, #7
 800015c:	601a      	str	r2, [r3, #0]
}
 800015e:	bf00      	nop
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	e000e010 	.word	0xe000e010

0800016c <_Z9DelayInitv>:

void DelayInit()
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	SystickInitialize();
 8000170:	f7ff ffec 	bl	800014c <_Z17SystickInitializev>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}

08000178 <_Z7DelayMsm>:

void DelayMs(uint32_t ms)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
    // Wait until ms reach zero
	Ticks = ms;
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <_Z7DelayMsm+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6013      	str	r3, [r2, #0]
    while(Ticks);
 8000186:	bf00      	nop
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <_Z7DelayMsm+0x30>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	bf14      	ite	ne
 8000190:	2301      	movne	r3, #1
 8000192:	2300      	moveq	r3, #0
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d1f6      	bne.n	8000188 <_Z7DelayMsm+0x10>
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	2000001c 	.word	0x2000001c

080001ac <main>:
#include "delay.h"
#include "output.h"
unsigned int counter;

int main()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<4); //RCC enable for GPIOC
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <main+0x64>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a16      	ldr	r2, [pc, #88]	; (8000210 <main+0x64>)
 80001b8:	f043 0310 	orr.w	r3, r3, #16
 80001bc:	6193      	str	r3, [r2, #24]
	//Configure the whole port to be output Pins (in both mode and configuration)
	GPIOC->CRH = 0x33333333;
 80001be:	4b15      	ldr	r3, [pc, #84]	; (8000214 <main+0x68>)
 80001c0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80001c4:	605a      	str	r2, [r3, #4]
	Output green_led(GPIOC,13); //check the 13
 80001c6:	463b      	mov	r3, r7
 80001c8:	220d      	movs	r2, #13
 80001ca:	4912      	ldr	r1, [pc, #72]	; (8000214 <main+0x68>)
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 f823 	bl	8000218 <_ZN6OutputC1EP12GPIO_TypeDefh>
	DelayInit();
 80001d2:	f7ff ffcb 	bl	800016c <_Z9DelayInitv>

	while(1)
	{
		GPIOC->ODR &=~(1<<13);//below can replace this line
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <main+0x68>)
 80001d8:	68db      	ldr	r3, [r3, #12]
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <main+0x68>)
 80001dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001e0:	60d3      	str	r3, [r2, #12]
		green_led.Off();
 80001e2:	463b      	mov	r3, r7
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f877 	bl	80002d8 <_ZN6Output3OffEv>
		DelayMs(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f7ff ffc3 	bl	8000178 <_Z7DelayMsm>
		GPIOC->ODR |= (1<<13);//below can replace this line
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <main+0x68>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <main+0x68>)
 80001f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fc:	60d3      	str	r3, [r2, #12]
		green_led.On();
 80001fe:	463b      	mov	r3, r7
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f853 	bl	80002ac <_ZN6Output2OnEv>
		DelayMs(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f7ff ffb5 	bl	8000178 <_Z7DelayMsm>
		GPIOC->ODR &=~(1<<13);//below can replace this line
 800020e:	e7e2      	b.n	80001d6 <main+0x2a>
 8000210:	40021000 	.word	0x40021000
 8000214:	40011000 	.word	0x40011000

08000218 <_ZN6OutputC1EP12GPIO_TypeDefh>:
 */

#include "Output.h"

uint8_t Output::output_counter = 0;
Output::Output(GPIO_TypeDef * GPIO, uint8_t pin) : port_{GPIO}, pin_{pin}
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	4613      	mov	r3, r2
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	68ba      	ldr	r2, [r7, #8]
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	79fa      	ldrb	r2, [r7, #7]
 8000230:	711a      	strb	r2, [r3, #4]
	{
		Off();
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f000 f850 	bl	80002d8 <_ZN6Output3OffEv>
		//below if to configure the 4 bits for output
		if (output_counter ==0)
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d107      	bne.n	8000250 <_ZN6OutputC1EP12GPIO_TypeDefh+0x38>
		{
			port_->CRL = 0x00000000;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
			port_->CRH = 0x00000000;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	605a      	str	r2, [r3, #4]
		}
		output_counter++;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 800025a:	701a      	strb	r2, [r3, #0]
				if(pin_<PINS_PER_REGISTER)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	2b07      	cmp	r3, #7
 8000262:	d80c      	bhi.n	800027e <_ZN6OutputC1EP12GPIO_TypeDefh+0x66>
				{
					port_->CRL |= (OUTPUT_HIGH_SPEED<<pin_*BITS_PER_PIN);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	2203      	movs	r2, #3
 8000272:	409a      	lsls	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	430a      	orrs	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	e00e      	b.n	800029c <_ZN6OutputC1EP12GPIO_TypeDefh+0x84>
					//e.g.: PA1 will OUTPUT HIGH will be (3<<1*4);
				}
				else
				{
					port_->CRH |= (OUTPUT_HIGH_SPEED<<(pin_*BITS_PER_PIN-BITS_PER_REGISTER));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	6859      	ldr	r1, [r3, #4]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	791b      	ldrb	r3, [r3, #4]
 8000288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800028c:	3b08      	subs	r3, #8
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	2203      	movs	r2, #3
 8000292:	409a      	lsls	r2, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	430a      	orrs	r2, r1
 800029a:	605a      	str	r2, [r3, #4]
				}
	}
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4618      	mov	r0, r3
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000020 	.word	0x20000020

080002ac <_ZN6Output2OnEv>:
		{
			Off();
		}

	void Output::On()
		{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
			port_->ODR |= (1<<pin_); //This is the way for setting bit high keeping the value in other bits in the register
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	68da      	ldr	r2, [r3, #12]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	791b      	ldrb	r3, [r3, #4]
 80002be:	4619      	mov	r1, r3
 80002c0:	2301      	movs	r3, #1
 80002c2:	408b      	lsls	r3, r1
 80002c4:	4619      	mov	r1, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	430a      	orrs	r2, r1
 80002cc:	60da      	str	r2, [r3, #12]
		}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <_ZN6Output3OffEv>:

		void Output::Off()
		{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
			port_->ODR &=~(1<<pin_); //This is the way we clear certain bit keeping value in other bits in the register
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68da      	ldr	r2, [r3, #12]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	791b      	ldrb	r3, [r3, #4]
 80002ea:	4619      	mov	r1, r3
 80002ec:	2301      	movs	r3, #1
 80002ee:	408b      	lsls	r3, r1
 80002f0:	43db      	mvns	r3, r3
 80002f2:	4619      	mov	r1, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	400a      	ands	r2, r1
 80002fa:	60da      	str	r2, [r3, #12]
		}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
	...

08000314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000314:	f7ff fff7 	bl	8000306 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480b      	ldr	r0, [pc, #44]	; (8000348 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800031a:	490c      	ldr	r1, [pc, #48]	; (800034c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <LoopFillZerobss+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000330:	4c09      	ldr	r4, [pc, #36]	; (8000358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800033e:	f000 f80f 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff33 	bl	80001ac <main>
  bx lr
 8000346:	4770      	bx	lr
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	20000024 	.word	0x20000024

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	2600      	movs	r6, #0
 8000364:	4d0c      	ldr	r5, [pc, #48]	; (8000398 <__libc_init_array+0x38>)
 8000366:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	f000 f81a 	bl	80003a8 <_init>
 8000374:	2600      	movs	r6, #0
 8000376:	4d0a      	ldr	r5, [pc, #40]	; (80003a0 <__libc_init_array+0x40>)
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <__libc_init_array+0x44>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
