
GPIO_Test_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080003d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003d4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001255  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000808  00000000  00000000  000212c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000158  00000000  00000000  00021cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000802  00000000  00000000  00021e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002711  00000000  00000000  0002261a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b9b4  00000000  00000000  00024d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005bc  00000000  00000000  000a06e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a0c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003b0 	.word	0x080003b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003b0 	.word	0x080003b0

0800014c <main>:
#include "main.h"
#include "Output.h"

int main()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	// 1- Enable clock gating for GPIOA and GPIOB
	RCC->APB2ENR = (1<<2) | (1<<3);
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <main+0x58>)
 8000154:	220c      	movs	r2, #12
 8000156:	619a      	str	r2, [r3, #24]
	//RCC register is a struct where ABP2ENR register exists, set the bit 2 & 3 to high for Ports A and B enabling
	// 2- Configure PA1 to be output Pin (in both mode and configuration)
	GPIOA->CRL = (3<<4);
 8000158:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <main+0x5c>)
 800015a:	2230      	movs	r2, #48	; 0x30
 800015c:	601a      	str	r2, [r3, #0]
	// GPIO register is a struct where CRL exists, 0011 (decimal 3) starting from bit 4 in the GPIO_CRL
	// same for PB4 (Input pull up) (0100) (floating input) (16/4 for pin 4)
	GPIOB->CRL = (4<<16);
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <main+0x60>)
 8000160:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000164:	601a      	str	r2, [r3, #0]

	Output green_led(GPIOA,2);
 8000166:	1d3b      	adds	r3, r7, #4
 8000168:	2202      	movs	r2, #2
 800016a:	490f      	ldr	r1, [pc, #60]	; (80001a8 <main+0x5c>)
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f81f 	bl	80001b0 <_ZN6OutputC1EP12GPIO_TypeDefh>

	while (1)
	{
		auto btn_value = GPIOB->IDR & (1<<4); //4 is pin number
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <main+0x60>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	f003 0310 	and.w	r3, r3, #16
 800017a:	60fb      	str	r3, [r7, #12]
		// note that btn is active low (pull up resistor)
		if (btn_value == 0)
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d107      	bne.n	8000192 <main+0x46>
		{
		GPIOA->ODR=(1<<1);// I think below line can replace this line
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <main+0x5c>)
 8000184:	2202      	movs	r2, #2
 8000186:	60da      	str	r2, [r3, #12]
		green_led.On();
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	4618      	mov	r0, r3
 800018c:	f000 f85a 	bl	8000244 <_ZN6Output2OnEv>
 8000190:	e7ef      	b.n	8000172 <main+0x26>
		}
		else
		{
			GPIOA->ODR = 0x0000;// I think also below line can replace this line
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <main+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	60da      	str	r2, [r3, #12]
			green_led.Off();
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f868 	bl	8000270 <_ZN6Output3OffEv>
		}
	}
 80001a0:	e7e7      	b.n	8000172 <main+0x26>
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000
 80001a8:	40010800 	.word	0x40010800
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <_ZN6OutputC1EP12GPIO_TypeDefh>:
 */

#include "Output.h"

uint8_t Output::output_counter = 0;
Output::Output(GPIO_TypeDef * GPIO, uint8_t pin) : port_{GPIO}, pin_{pin}
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4613      	mov	r3, r2
 80001bc:	71fb      	strb	r3, [r7, #7]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	601a      	str	r2, [r3, #0]
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	79fa      	ldrb	r2, [r7, #7]
 80001c8:	711a      	strb	r2, [r3, #4]
	{
		Off();
 80001ca:	68f8      	ldr	r0, [r7, #12]
 80001cc:	f000 f850 	bl	8000270 <_ZN6Output3OffEv>
		//below if to configure the 4 bits for output
		if (output_counter ==0)
 80001d0:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d107      	bne.n	80001e8 <_ZN6OutputC1EP12GPIO_TypeDefh+0x38>
		{
			port_->CRL = 0x00000000;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
			port_->CRH = 0x00000000;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2200      	movs	r2, #0
 80001e6:	605a      	str	r2, [r3, #4]
		}
		output_counter++;
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3301      	adds	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <_ZN6OutputC1EP12GPIO_TypeDefh+0x90>)
 80001f2:	701a      	strb	r2, [r3, #0]
				if(pin_<PINS_PER_REGISTER)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	2b07      	cmp	r3, #7
 80001fa:	d80c      	bhi.n	8000216 <_ZN6OutputC1EP12GPIO_TypeDefh+0x66>
				{
					port_->CRL |= (OUTPUT_HIGH_SPEED<<pin_*BITS_PER_PIN);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	6819      	ldr	r1, [r3, #0]
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	791b      	ldrb	r3, [r3, #4]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	2203      	movs	r2, #3
 800020a:	409a      	lsls	r2, r3
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	430a      	orrs	r2, r1
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	e00e      	b.n	8000234 <_ZN6OutputC1EP12GPIO_TypeDefh+0x84>
					//e.g.: PA1 will OUTPUT HIGH will be (3<<1*4);
				}
				else
				{
					port_->CRH |= (OUTPUT_HIGH_SPEED<<(pin_*BITS_PER_PIN-BITS_PER_REGISTER));
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	6859      	ldr	r1, [r3, #4]
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	791b      	ldrb	r3, [r3, #4]
 8000220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000224:	3b08      	subs	r3, #8
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	2203      	movs	r2, #3
 800022a:	409a      	lsls	r2, r3
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	430a      	orrs	r2, r1
 8000232:	605a      	str	r2, [r3, #4]
				}
	}
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	4618      	mov	r0, r3
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000020 	.word	0x20000020

08000244 <_ZN6Output2OnEv>:
		{
			Off();
		}

	void Output::On()
		{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
			port_->ODR |= (1<<pin_); //This is the way for setting bit high keeping the value in other bits in the register
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	68da      	ldr	r2, [r3, #12]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	791b      	ldrb	r3, [r3, #4]
 8000256:	4619      	mov	r1, r3
 8000258:	2301      	movs	r3, #1
 800025a:	408b      	lsls	r3, r1
 800025c:	4619      	mov	r1, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	430a      	orrs	r2, r1
 8000264:	60da      	str	r2, [r3, #12]
		}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_ZN6Output3OffEv>:

		void Output::Off()
		{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
			port_->ODR &=~(1<<pin_); //This is the way we clear certain bit keeping value in other bits in the register
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	68da      	ldr	r2, [r3, #12]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	4619      	mov	r1, r3
 8000284:	2301      	movs	r3, #1
 8000286:	408b      	lsls	r3, r1
 8000288:	43db      	mvns	r3, r3
 800028a:	4619      	mov	r1, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	400a      	ands	r2, r1
 8000292:	60da      	str	r2, [r3, #12]
		}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr

0800029e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a2:	e7fe      	b.n	80002a2 <NMI_Handler+0x4>

080002a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <HardFault_Handler+0x4>

080002aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <MemManage_Handler+0x4>

080002b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <BusFault_Handler+0x4>

080002b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <UsageFault_Handler+0x4>

080002bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e4:	f000 f82e 	bl	8000344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002f8:	f7ff fff8 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480b      	ldr	r0, [pc, #44]	; (800032c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002fe:	490c      	ldr	r1, [pc, #48]	; (8000330 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a09      	ldr	r2, [pc, #36]	; (8000338 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000314:	4c09      	ldr	r4, [pc, #36]	; (800033c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f821 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff11 	bl	800014c <main>
  bx lr
 800032a:	4770      	bx	lr
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000028 	.word	0x20000028

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_IncTick+0x1c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_IncTick+0x20>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <HAL_IncTick+0x20>)
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	20000000 	.word	0x20000000
 8000364:	20000024 	.word	0x20000024

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	2600      	movs	r6, #0
 800036c:	4d0c      	ldr	r5, [pc, #48]	; (80003a0 <__libc_init_array+0x38>)
 800036e:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	f000 f81a 	bl	80003b0 <_init>
 800037c:	2600      	movs	r6, #0
 800037e:	4d0a      	ldr	r5, [pc, #40]	; (80003a8 <__libc_init_array+0x40>)
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <__libc_init_array+0x44>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
